/*
 * DoRobot.java
 *
 * Created on February 28, 2003, 6:32 AM
 */

/**
 *
 * @author  Jim
 */
import java.io.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;

public class DoRobot {
Robot robot;
boolean trace = false;
boolean debug = false;
    /** Creates a new instance of DoRobot */
    public DoRobot(String[] args) {
        if(args.length != 2 && args.length != 3) {
            System.out.println("Error!  Usage: java DoRobot <carrier> <NPANXX file name> [<-debug> <-traceRobot>]");
            System.exit(1);
        }
        String carrier = args[0];
        String inFile  = args[1];
        if(args.length == 3) {
//System.out.println("("+args[1].substring(0,2)+")");            
            if(args[2].substring(0,2).equals("-d")) {
                debug = true;
            } else if(args[2].substring(0,2).equals("-t")) {
                trace = true;
			}
        }
        System.out.println("Using data file: " + inFile);
        File fh = new File(inFile);
        if(fh == null || !fh.exists() || fh.canRead() != true || !fh.isFile()) {
            System.out.println("Error!  File: (" + inFile + ") must exist.");
            System.exit(1);
        }
        //open file
 try {
    boolean done = false;
    FileReader fr = new FileReader(fh);
    BufferedReader in = new BufferedReader(fr);
    String npanxx; // = in.readLine();

   robot = new Robot();
   if(robot == null) {
        System.out.println("Error!  Cannot create robot.");
        System.exit(1);
   }
   System.out.println("processing NPANXX's");     
   System.out.println("You have 5 seconds until I start");
   boolean circut = false;
   pause(5);
	int count = 0;
    while(!done) {

//		if(count++ > 10) //hack
//			break;		 //hack
        npanxx = in.readLine();
        if(npanxx != null){
            System.out.print(npanxx);
		} else
			break;
     /*****************************************/
	 robot.delay(500);  //wait for previous dialog to go away
	 MousePress(94,374,true);
     SendString(npanxx);
	 Send(KeyEvent.VK_ENTER);    //enter
	 robot.delay(500); //let screen repaint
	
	if(checkForError(260,130)){ //point on title bar of "PHNZAZNN has PNAnxxs in more than one LATA.  Please select one!"
System.out.println(" Error: PHNZAZNN has PNAnxxs in more than one LATA. -SKIPPED-");
		MousePress(402,377,false);
		 continue;
	}
	if(checkForError(290,222)){ //point on title bar of 
//press cancel if it's there (if it's not, no big deal)
		MousePress(344,315,false);	//move to cancel button (can't be done via keyboard)
		if(!checkForError(290,222)){ //is dialog still up?
System.out.println(" Error: Use NECA rates for Independent. -SKIPPED-");
		} else {
System.out.println(" Error: Input unknown, re-enter data. -SKIPPED-");
			 Send(KeyEvent.VK_ENTER);   //enter
		     robot.delay(250); 			//wait for dialog to disappear
//press OK button (extra click doesn't hurt)
			 MousePress(344,315,false);	//move to cancel button (can't be done via keyboard)
		}
		continue;
	}
	 MousePress(549,374,false);	//move to cancel button (can't be done via keyboard)
	 MousePress(333,283,true);	//move to print button
	 Send(KeyEvent.VK_ENTER);    //default is NO comments
	 
     robot.delay(500);
	 String newFileName = "npanxx."+carrier+"."+npanxx + ".txt";
     SendString(newFileName);
	 Send(KeyEvent.VK_ENTER);    //enter
	 
     robot.delay(250);			//possible confirmation dialog, so always assume it's there (no problem)
     Send(KeyEvent.VK_TAB);		//tab
	 Send(KeyEvent.VK_SPACE);   //space
	 
     /*****************************************/
	 //confirm that file exists
     newFileName = "c:\\" + newFileName;
     File newFH = new File(newFileName);
	 if(newFH.exists())
	     System.out.println(" OK");
	else {
		System.out.println(" ERROR: file "+newFileName+" does not exist, aborting...");
		break;
	} 
    }
//     SendString("Finished");
    
     } catch (Exception e) {
         System.out.println("I/O exception " + e + ". While processing file" + inFile);
         System.exit(1);
     }
    }
    
/**
 * @param args the command line arguments
 */
    public static void main(String[] args) {
        new DoRobot(args);
    }


	private void MousePress(int x,int y,boolean isNewDialog) {
		int postDelay = isNewDialog ? 500 : 100;
		if(debug || trace)
			System.out.println("pressing mosue button at ("+x+", "+y+") post delay = "+postDelay);
		
	    robot.mouseMove(x,y);
		if(debug)		 
			robot.delay(1000); //wait for dialog to disappear
			
	    robot.mousePress(InputEvent.BUTTON1_MASK);
	    robot.mouseRelease(InputEvent.BUTTON1_MASK);
	    robot.delay(postDelay); //wait for dialog to appear
	}
/**
 * pause
 */
    private void pause(int seconds) {
    if(debug || trace)
        System.out.print(" [delay " + seconds + " seconds] ");
    if(!debug) {
		for(int i=0; i < seconds; ++i) {
		 System.out.print(i+" ");
         robot.delay(1000);
		 Toolkit.getDefaultToolkit().beep();
		}
		System.out.println();
//         robot.delay(seconds * 1000);
	}
    }
/**
 * checkForError
 */
	private boolean checkForError(int x, int y) {
		Color clr = robot.getPixelColor(x,y);
	    robot.mouseMove(x,y);
		for(int i=1; i < 100; ++i){
		    robot.mouseMove(x+i,y);
 	        robot.delay(10);
			if(!clr.equals(robot.getPixelColor(x+i,y))) {
//System.out.println("no message box found. Difference at "+i);
				return false;
			}
		}
System.out.println("Message box found!");
for(int j=1; j < 10; ++j) {
	for(int i=1; i < 100; ++i){
	    robot.mouseMove(x+i,y);
	        robot.delay(5);
	}
}
Toolkit.getDefaultToolkit().beep();
robot.delay(5000);
		return true;
	}
/**
 * Send
 */
    private void  Send(int keycode, int down){
        if(debug || trace) {
            String str;
            if(keycode == KeyEvent.VK_SHIFT)
                str = "shift";
            else if(keycode == KeyEvent.VK_ALT)
                str = "alt";
            else 
                str = "{" + keycode + "}";
            str += (down == 1) ? " down" : " up";
                
            System.out.print("[" + str + "] ");
        } 
        if (!debug) {
            if(down == 1)
                robot.keyPress(keycode);
            else
                robot.keyRelease(keycode);
            robot.delay(250);
      }
    }
/**
 * Send
 */
    private void  Send(int keycode){
        if(debug || trace) {
            String str = "[" + keycode + "] ";
            if(keycode == KeyEvent.VK_TAB)
                str = "[tab] ";
            else if(keycode == KeyEvent.VK_ENTER)
                str = "[enter] ";
            else if(keycode >= KeyEvent.VK_A && keycode <= KeyEvent.VK_Z) {
                char ch = (char)('A' + (char)(keycode - KeyEvent.VK_A));
                str = "[" + ch + "] ";
            }
            System.out.print(str);
        } 
        if (!debug) {
            robot.keyPress(keycode);
            robot.keyRelease(keycode);
            robot.delay(250);
        }
    }
/**
 * SendString
 */
    private void SendString(String str) {
        if(debug || trace) {
            System.out.print("("+str+") ");        
        } 
        if(!debug) {
            int len = str.length();
            for(int i = 0; i < len; ++i) {
                char key = str.charAt(i);
                int keycode = 0;
                if(key >= '0' && key <= '9')
                    keycode = KeyEvent.VK_0 + key - '0';
                else if(key >= 'A' && key <= 'Z')
                    keycode = KeyEvent.VK_A + key - 'A';
                else if(key >= 'a' && key <= 'z')
                    keycode = KeyEvent.VK_A + key - 'a';
                else if(key == '\\')
                    keycode =  '/'; //KeyEvent.VK_SLASH OR VK_BACK_SLASH;
                else if(key == '.')
                    keycode = '.'; //KeyEvent.VK_PERIOD;
                else if(key == '_')
                    keycode = KeyEvent.VK_UNDERSCORE;
                else if(key == ':')
                    keycode = KeyEvent.VK_COLON;
				else {
					System.out.println("Error: Unknown character(" + key + ")");
				}	
                if(keycode != 0) {
					if(trace) {
						System.out.print(keycode + " ");    
					}
    	            robot.keyPress(keycode);
	                robot.keyRelease(keycode);
                }
            }
//        robot.delay(1000);            
        }
    }
}
